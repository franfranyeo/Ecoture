// <auto-generated />
using System;
using EcotureAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcotureAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250207051939_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContentNewsletter", b =>
                {
                    b.Property<int>("ContentsContentId")
                        .HasColumnType("int");

                    b.Property<int>("NewsletterIssueId")
                        .HasColumnType("int");

                    b.HasKey("ContentsContentId", "NewsletterIssueId");

                    b.HasIndex("NewsletterIssueId");

                    b.ToTable("NewsletterContents", (string)null);
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Membership")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PreferencesId")
                        .HasColumnType("int");

                    b.Property<string>("ProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ContentId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Enquiry", b =>
                {
                    b.Property<int>("enquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("enquiryId");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Membership", b =>
                {
                    b.Property<int>("membershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("lastTierUpgradeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("membershipEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("membershipStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("tier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("totalPoints")
                        .HasColumnType("int");

                    b.Property<decimal>("totalSpent")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("membershipId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Newsletter", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NewsletterCategory")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("IssueId");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.PointsTransaction", b =>
                {
                    b.Property<int>("transactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("expiryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("pointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("pointsSpent")
                        .HasColumnType("int");

                    b.Property<int?>("referralId")
                        .HasColumnType("int");

                    b.Property<int?>("reviewId")
                        .HasColumnType("int");

                    b.Property<string>("transactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("voucherId")
                        .HasColumnType("int");

                    b.HasKey("transactionId");

                    b.HasIndex("referralId");

                    b.HasIndex("userId");

                    b.HasIndex("voucherId");

                    b.ToTable("PointsTransactions");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Fit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PriceRange")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .HasDatabaseName("IX_Product_Description");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Product_Title");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Referral", b =>
                {
                    b.Property<int>("referralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("refereeUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("referralDate")
                        .HasColumnType("datetime");

                    b.Property<int>("referrerUserId")
                        .HasColumnType("int");

                    b.HasKey("referralId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("refereeUserId");

                    b.HasIndex("referrerUserId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Response", b =>
                {
                    b.Property<int>("responseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("csoId")
                        .HasColumnType("int");

                    b.Property<int>("enquiryId")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("responseDate")
                        .HasColumnType("datetime");

                    b.HasKey("responseId");

                    b.HasIndex("enquiryId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<bool>("DeleteRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DeleteRequestedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Is2FAEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PfpURL")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReferralCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserOtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OtpType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOTPs");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserRedemptions", b =>
                {
                    b.Property<int>("RedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PointsUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("RedemptionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("RedemptionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserRedemptions");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFirstTimeUseOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOneTimeUseOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VoucherDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VoucherLimit")
                        .HasColumnType("int");

                    b.Property<string>("VoucherTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("VoucherValue")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("VoucherId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("EcotureAPI.Models.Response.MfaResponse", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Authenticator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Email")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Sms")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId");

                    b.ToTable("MfaResponses");
                });

            modelBuilder.Entity("ContentNewsletter", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentsContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.Newsletter", null)
                        .WithMany()
                        .HasForeignKey("NewsletterIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Address", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.CreditCard", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Membership", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithOne("Membership")
                        .HasForeignKey("EcotureAPI.Models.Entity.Membership", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.PointsTransaction", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Referral", "Referral")
                        .WithMany()
                        .HasForeignKey("referralId");

                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany("PointsTransactions")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.Voucher", "Voucher")
                        .WithMany("PointsTransactions")
                        .HasForeignKey("voucherId");

                    b.Navigation("Referral");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Product", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.ProductColor", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.ProductSize", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Referral", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", null)
                        .WithMany("ReferralsReceived")
                        .HasForeignKey("UserId");

                    b.HasOne("EcotureAPI.Models.Entity.User", null)
                        .WithMany("ReferralsSent")
                        .HasForeignKey("UserId1");

                    b.HasOne("EcotureAPI.Models.Entity.User", "refereeUser")
                        .WithMany()
                        .HasForeignKey("refereeUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.User", "referrerUser")
                        .WithMany()
                        .HasForeignKey("referrerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("refereeUser");

                    b.Navigation("referrerUser");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Response", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Enquiry", "Enquiry")
                        .WithMany("Responses")
                        .HasForeignKey("enquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enquiry");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Review", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserOtp", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserRedemptions", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany("UserRedemptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcotureAPI.Models.Entity.Voucher", "Voucher")
                        .WithMany("UserRedemptions")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.UserToken", b =>
                {
                    b.HasOne("EcotureAPI.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Enquiry", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Product", b =>
                {
                    b.Navigation("ProductColors");

                    b.Navigation("ProductSizes");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Size", b =>
                {
                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.User", b =>
                {
                    b.Navigation("Membership");

                    b.Navigation("PointsTransactions");

                    b.Navigation("Products");

                    b.Navigation("ReferralsReceived");

                    b.Navigation("ReferralsSent");

                    b.Navigation("UserRedemptions");
                });

            modelBuilder.Entity("EcotureAPI.Models.Entity.Voucher", b =>
                {
                    b.Navigation("PointsTransactions");

                    b.Navigation("UserRedemptions");
                });
#pragma warning restore 612, 618
        }
    }
}
